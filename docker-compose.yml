# for sharing a file swagger.json made during build docker image of sensors_api
# VERY IMPORTANT - it uses a volume witch is persisted. 
# Remember to delete this volume before new build, otherwise docker is not copying already existing swagger.json from container to host !
# command is 'docker volume rm rumair_pmpro_sensors_api_swaggerDefFile' or docker volume prune.
version: "3.7"
volumes:
    swaggerDefFile:
services:
    sensors_api:
        image: rumairstaging.azurecr.io/sensors_api:latest
        container_name: sensors_api
        build:
            context: ./
            cache_from:
                - golang:alpine:latest
                - quay.io/goswagger/swagger:latest
            args:
                BUILD_TYPE: Build from AzureDevOps
        volumes:
            - type: volume # the mount type volume, bind, tmpfs or npipe
              source: swaggerDefFile # the source of the mount, a path on the host for a bind mount, or the name of a volume defined in the top-level volumes key.
              target: /home/swagger # the path in the container where the volume is mounted
              read_only: false #flag to set the volume as read-only
    swagger:
        image: swaggerapi/swagger-ui:latest
        container_name: swaggerUI_sensors_api
        depends_on:
            - sensors_api
        ports:
            - "80:8080"
        environment:
            - BASE_URL=/swagger 
            - SWAGGER_JSON=/etc/swagger/swagger.json
        volumes:
            - type: volume
              source: swaggerDefFile
              target: /etc/swagger
              read_only: true
              volume:
                nocopy: false # flag to disable copying of data from a container when a volume is created

# How to run swagger spec generator locally 
#You can put the following in a file called swagger.bat and include it in your path environment variable to act as an alias.
# echo off
# echo.
# docker run --rm -it --env GOPATH=/go -v %CD%:/go/src -w /go/src quay.io/goswagger/swagger %*

#then run :
#swagger generate .\swagger generate spec -o ./swagger.json
#swagger validate --stop-on-error ./swagger.json 