# starting point https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/go?view=azure-devops
# this is NON-CONTENERIZED (NON-DOCKERIZE) build version. 
# https://aka.ms/yaml

trigger:
  - master
  
pool:
  vmImage: 'ubuntu-latest'
  
variables:
      GOBIN:  '$(GOPATH)/bin' # Go binaries path
      GOROOT: '/usr/local/go1.13' # Go installation path
      GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
      modulePath: $(GOPATH)/src/github.com/$(build.repository.name) # Path to the module's code
      #withIntegrationTests: true
    
steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
    echo 'MODULE PATH IS : $(modulePath)' 
  displayName: 'Set up the Go workspace'
  
- script: |
    go version
  displayName: 'Show GO version used.'

- script: |
    go get -v -t -d ./...
    if [ -f Gopkg.toml ]; then
        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
        dep ensure
    fi
  workingDirectory: '$(modulePath)'
  displayName: 'Get dependencies.'

- script: |
    go build -v .
  workingDirectory: '$(modulePath)'
  displayName: 'Building app.'

- script: |
    echo 'MODULE PATH IS : $(modulePath)/airStations'
    echo 'RUNNING TESTS WITH `withIntegrationTests` flag set to : $(withIntegrationTests)'
    go test -v . -args -withIntegrationTests=$(withIntegrationTests)
  workingDirectory: '$(modulePath)/airStations'
  displayName: 'Run TESTS for AIRSTATIONS module'

- script: |
    echo 'MODULE PATH IS : $(modulePath)/api'
    echo 'RUNNING TESTS WITH `withIntegrationTests` flag set to : $(withIntegrationTests)'
    go test -v . -args -withIntegrationTests=$(withIntegrationTests)
  workingDirectory: '$(modulePath)/api'
  displayName: 'Run TESTS for API module'

- task: CopyFiles@1
  inputs:
    SourceFolder: '$(modulePath)'
    Contents: '$(modulePath)/bin'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    OverWrite: true/
  
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    #Specify the name of the artifact that you want to create. It can be whatever you want. For example: drop
    ArtifactName: 'RumAir_LinuxApp'
    # Choose whether to store the artifact in Azure Pipelines (Container), or to copy it to a file share (FilePath) that must be accessible from the build agent.
    publishLocation: 'Container'
    #targetPath: # Required when publishLocation == FilePath