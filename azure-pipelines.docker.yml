# Docker image
# Build a Docker image to run, deploy, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

pool:
    vmImage: 'ubuntu-latest'
  
variables:
    imageName: 'rumAir-$(build.buildId)'
    GOBIN:  '$(GOPATH)/bin' # Go binaries path
    GOROOT: '/usr/local/go1.13' # Go installation path
    GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
    modulePath: $(GOPATH)/src/github.com/$(build.repository.name) # Path to the module's code
  
# that works
# steps:
#   - script: docker build -f Dockerfile -t $(imageName) .
#     displayName: 'docker build'

# or, after https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/containers/build-image?view=azure-devops

# trigger:
# - master

# pool:
#   vmImage: 'Ubuntu-16.04'

# variables:
#   imageName: 'pipelines-javascript-docker'

# steps:
# - task: Docker@2
#   displayName: Build an image
#   inputs:
#     repository: $(imageName)
#     command: build
#     Dockerfile: app/Dockerfile

steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
    echo 'MODULE PATH IS : $(modulePath)' 
  displayName: 'Set up the Go workspace'

# - script: |
#     go get -v -t -d ./...
#     if [ -f Gopkg.toml ]; then
#         curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
#         dep ensure
#     fi
#   workingDirectory: '$(modulePath)'
#   displayName: 'Get dependencies.'

- script: |
    go build -v .
  workingDirectory: '$(modulePath)'
  displayName: 'Building app.'

- script: |
    echo 'MODULE PATH IS : $(modulePath)/airStations'
    echo 'RUNNING TESTS WITH `withIntegrationTests` flag set to : $(withIntegrationTests)'
    go test -v . -args -withIntegrationTests=$(withIntegrationTests)
  workingDirectory: '$(modulePath)/airStations'
  displayName: 'Run TESTS for AIRSTATIONS module'

- script: |
    echo 'MODULE PATH IS : $(modulePath)/api'
    echo 'RUNNING TESTS WITH `withIntegrationTests` flag set to : $(withIntegrationTests)'
    go test -v . -args -withIntegrationTests=$(withIntegrationTests)
  workingDirectory: '$(modulePath)/api'
  displayName: 'Run TESTS for API module'

- task: Docker@2
  displayName: Build a Docker image
  inputs:
    repository: $(imageName)
    command: build
    Dockerfile: Dockerfile

- task: CopyFiles@1
  inputs:
    SourceFolder: '$(modulePath)'
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    OverWrite: true/
  
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'RumAirApp'
    publishLocation: 'Container'