// Code generated by MockGen. DO NOT EDIT.
// Source: .\airStations\stationSensors.go

// Package api is a generated GoMock package.
package api

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIHttpAbstracter is a mock of IHttpAbstracter interface.
type MockIHttpAbstracter struct {
	ctrl     *gomock.Controller
	recorder *MockIHttpAbstracterMockRecorder
}

// MockIHttpAbstracterMockRecorder is the mock recorder for MockIHttpAbstracter.
type MockIHttpAbstracterMockRecorder struct {
	mock *MockIHttpAbstracter
}

// NewMockIHttpAbstracter creates a new mock instance.
func NewMockIHttpAbstracter(ctrl *gomock.Controller) *MockIHttpAbstracter {
	mock := &MockIHttpAbstracter{ctrl: ctrl}
	mock.recorder = &MockIHttpAbstracterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHttpAbstracter) EXPECT() *MockIHttpAbstracterMockRecorder {
	return m.recorder
}

// DoHttpGetCall mocks base method.
func (m *MockIHttpAbstracter) DoHttpGetCall(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoHttpGetCall", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoHttpGetCall indicates an expected call of DoHttpGetCall.
func (mr *MockIHttpAbstracterMockRecorder) DoHttpGetCall(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoHttpGetCall", reflect.TypeOf((*MockIHttpAbstracter)(nil).DoHttpGetCall), arg0)
}
